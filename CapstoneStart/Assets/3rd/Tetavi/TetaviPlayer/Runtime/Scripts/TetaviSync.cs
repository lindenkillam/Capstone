using System.Collections;
using System.Collections.Generic;
using System;
using UnityEngine;
using UnityEditor;



public class TetaviSync : MonoBehaviour
{
    int Fps { get; set; } =30;
    int speedCoef = 1;
    public int FramePlaying  // use to position the progress bar controller 
    {
        get => (int)(Fps * ((DateTime.Now - startTime).TotalMilliseconds - AccumlatedPauseMs()) * speedCoef / 1000) + startFrameIdx;
        set
        {
            SetFramePlaying(value);
        }
    }
    protected void SetFramePlaying(int value)
    {
        startFrameIdx = value;
        accumlatedPauseMs = 0;
        startTime = pausedTime = lastUpdate = System.DateTime.Now;
    }
    protected double AccumlatedPauseMs()
    {
        return accumlatedPauseMs + (pauseState ? (DateTime.Now - pausedTime).TotalMilliseconds : 0);
    }
    protected double accumlatedPauseMs = 0;
    public List<TetaviPlayer> players;
    public int startFrameIdx;
    private int tick;
    private int delay = 1000;
    private TetaviPlayer masterSound;
    bool pauseState = false;
    protected DateTime pausedTime;
    protected DateTime lastUpdate;
    protected DateTime startTime;
    private bool allStreamStarted = false;
    private bool masterSoundBinded = false;

    

    // Start is called before the first frame update
    public bool Pause // use for a pause button
    {
        set
        {
            if (pauseState == value)
                return;
            if (!pauseState && value)
            {
                pausedTime = lastUpdate = DateTime.Now;
            }
            else 
            {
                accumlatedPauseMs += (DateTime.Now - pausedTime).TotalMilliseconds;
                pausedTime = DateTime.Now;
            }
            pauseState = value;
        }
        get => pauseState;
    }

    void Start()
    {
        SetFramePlaying(startFrameIdx);

        for (int i = 0; i < players.Count; i++)
        {
            players[i].Pause = true;
        }
        
    }

    private void AllStreamsStarted()
    {
        allStreamStarted = true;
        for (int i = 0; i < players.Count; i++)
        {
            allStreamStarted = allStreamStarted && players[i].StreamStarted();
        }
    }

    private void BindMasterSound()
    {
        for (int i = 0; i < players.Count; i++)
        {

            if (!masterSound && players[i].hasAudio())
            {
                masterSound = players[i];
                players.RemoveAt(i);
                continue;
            }

        }
        for (int i = 0; i < players.Count; i++)
        {
            players[i].isTetaviSunc = true;
        }
        masterSoundBinded = true;
    }

    // Update is called once per frame
    void Update()
    {
        if (allStreamStarted)
        {
            if(!masterSoundBinded)
                BindMasterSound();
        }
        else
        {
            AllStreamsStarted();
            return;
        }


        lastUpdate = DateTime.Now;
        bool all_sync = true;
        if (masterSound && masterSound.hasAudio())
        {
            for (int i = 0; i < players.Count; i++)
            {
                
                if (!players[i].UpdateFrame(masterSound.FramePlaying))
                {
                    all_sync = false;
                }

            }
            masterSound.Pause = !all_sync;
        }
        else
        {
            int frame = FramePlaying % players[0].FrameCount;
            for (int i = 0; i < players.Count; i++)
            {

                if (!players[i].UpdateFrame(frame))
                {
                    all_sync = false;
                }

            }
            Pause = !all_sync;
        }
        
        
        

    }

    
}
#if UNITY_EDITOR
[CustomEditor(typeof(TetaviSync))]
public class LevelScriptEditor : Editor
{
    public override void OnInspectorGUI()
    {
        EditorGUILayout.HelpBox("set a List of Tetavi Players to be controlled by this Tetavi Sync GameObject. (the Audio will be generated by the first Tetavi Player with audio in this list.)", MessageType.Info);
        base.OnInspectorGUI();
    }
}
#endif